SRC=../../../../ORBITER/src
DISCRETA_CPP = /usr/bin/g++
DISCRETA_CC = /usr/bin/gcc
CPPFLAGS = -Wall -I$(SRC)/lib -I$(SRC)/lib/DISCRETA
LIB = $(SRC)/lib/liborbiter.a
LFLAGS = -lm





all: all_cliques.out \
	all_cycles.out \
	all_rainbow_cliques.out \
	cc2widor.out \
	colored_graph.out \
	create_layered_graph_file.out \
	distribution.out \
	dlx.out \
	draw_graph.out \
	draw_colored_graph.out \
	latex_table.out \
	layered_graph_main.out \
	loop.out \
	plot_decomposition_matrix.out  \
	plot_xy.out \
	run_blt.out  \
	scheduler.out \
	solve_diophant.out \
	split.out \
	treedraw.out \
	widor.out \
	prepare_frames.out \
	sajeeb.out \
	create_file.out \
	missing_files.out \
	read_solutions.out \
	read_orbiter_file.out \
	join_sets.out \
	concatenate_files.out \
	graph.out \
	collect.out \
	create_graph.out 



all_cliques.out:  all_cliques.o ;
	$(DISCRETA_CPP)  all_cliques.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

all_cycles.out:  all_cycles.o ;
	$(DISCRETA_CPP)  all_cycles.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

all_rainbow_cliques.out:  all_rainbow_cliques.o ;
	$(DISCRETA_CPP)  all_rainbow_cliques.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

cc2widor.out:  cc2widor.o ;
	$(DISCRETA_CPP)  cc2widor.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

colored_graph.out:  colored_graph.o ;
	$(DISCRETA_CPP)  colored_graph.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

create_layered_graph_file.out:  create_layered_graph_file.o ;
	$(DISCRETA_CPP)  create_layered_graph_file.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

distribution.out:  distribution.o;
	$(DISCRETA_CPP)  distribution.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

dlx.out:  dlx.o;
	$(DISCRETA_CPP)  dlx.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

draw_graph.out:  draw_graph.o ;
	$(DISCRETA_CPP)  draw_graph.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

draw_colored_graph.out:  draw_colored_graph.o ;
	$(DISCRETA_CPP)  draw_colored_graph.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

latex_table.out:  latex_table.o ;
	$(DISCRETA_CPP)  latex_table.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

layered_graph_main.out:  layered_graph_main.o ;
	$(DISCRETA_CPP)  layered_graph_main.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

loop.out:  loop.o ;
	$(DISCRETA_CPP)  loop.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

plot_decomposition_matrix.out:  plot_decomposition_matrix.o;
	$(DISCRETA_CPP)  plot_decomposition_matrix.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

plot_xy.out:  plot_xy.o ;
	$(DISCRETA_CPP)  plot_xy.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

run_blt.out:  run_blt.o;
	$(DISCRETA_CPP)  run_blt.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

scheduler.out:  scheduler.o;
	$(DISCRETA_CPP)  scheduler.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

solve_diophant.out:  solve_diophant.o;
	$(DISCRETA_CPP)  solve_diophant.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

split.out:  split.o;
	$(DISCRETA_CPP)  split.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

treedraw.out:  treedraw.o ;
	$(DISCRETA_CPP)  treedraw.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

widor.out:  widor.o ;
	$(DISCRETA_CPP)  widor.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

prepare_frames.out:  prepare_frames.o ;
	$(DISCRETA_CPP)  prepare_frames.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

sajeeb.out:  sajeeb.o ;
	$(DISCRETA_CPP)  sajeeb.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

create_file.out:  create_file.o ;
	$(DISCRETA_CPP)  create_file.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

missing_files.out:  missing_files.o ;
	$(DISCRETA_CPP)  missing_files.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

read_solutions.out:  read_solutions.o ;
	$(DISCRETA_CPP)  read_solutions.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

read_orbiter_file.out:  read_orbiter_file.o ;
	$(DISCRETA_CPP)  read_orbiter_file.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

join_sets.out:  join_sets.o ;
	$(DISCRETA_CPP)  join_sets.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

concatenate_files.out:  concatenate_files.o ;
	$(DISCRETA_CPP)  concatenate_files.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

graph.out:  graph.o ;
	$(DISCRETA_CPP)  graph.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

collect.out:  collect.o ;
	$(DISCRETA_CPP)  collect.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@

create_graph.out:  create_graph.o ;
	$(DISCRETA_CPP)  create_graph.o $(CPPFLAGS) $(LIB) $(LFLAGS) -o $@



clean:
	- rm *.o *.a *.out *~

%.o: %.C %.c; $(DISCRETA_CPP) $(CPPFLAGS) -c  -o $@ $<




