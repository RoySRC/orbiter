// create_graph.cpp
// 
// Anton Betten
// July 20, 2018
//
// 
//

#include "orbiter.h"

using namespace std;


using namespace orbiter;



// global data:

int t0; // the system time when the program started



int main(int argc, char **argv)
{
	int i;
	os_interface Os;
	t0 = Os.os_ticks();
	int verbose_level = 0;
	int f_save = FALSE;	
	const char *save_fname = NULL;
	int f_nb_vertices = FALSE;
	int nb_vertices = 0;
	int f_adjacency = FALSE;
	const char *adjacency_string = NULL;

	for (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-v") == 0) {
			verbose_level = atoi(argv[++i]);
			cout << "-v " << verbose_level << endl;
			}
		else if (strcmp(argv[i], "-save") == 0) {
			f_save = TRUE;
			save_fname = argv[++i];
			cout << "-save " << save_fname << endl;
			}
		else if (strcmp(argv[i], "-nb_vertices") == 0) {
			f_nb_vertices = TRUE;
			nb_vertices = atoi(argv[++i]);
			cout << "-nb_vertices " << nb_vertices << endl;
			}
		else if (strcmp(argv[i], "-adjacency") == 0) {
			f_adjacency = TRUE;
			adjacency_string = argv[++i];
			cout << "-adjacency " << adjacency_string << endl;
			}
		}
	if (!f_nb_vertices) {
		cout << "please use option -nb_vertices <nb_vertices>" << endl;
		exit(1);
	}
	if (!f_adjacency) {
		cout << "please use option -adjacency <adjacency>" << endl;
		exit(1);
	}


	int f_v = (verbose_level >= 1);

	colored_graph CG;
	int *Adjacency = NULL;
	int adjacency_length = 0;

	int_vec_scan(adjacency_string, Adjacency, adjacency_length);

	//int nb_vertices = 6;
	int nb_colors = 1;
	int *vertex_color;
	//int Adjacency[] = {1,0,0,0,1, 1,0,0,0, 1,0,0, 1,0, 1};

	vertex_color = NEW_int(nb_vertices);
	int_vec_zero(vertex_color, nb_vertices);

	CG.init_adjacency_upper_triangle(nb_vertices, nb_colors, 1,
		vertex_color, Adjacency, verbose_level);

	if (f_save) {
		cout << "saving graph to file " << save_fname << endl;
		CG.save(save_fname, verbose_level - 1);
		cout << "created a graph with " << CG.nb_points << " points"  << endl;
	}

	CG.print_adjacency_list();

	nauty_interface Nauty;
	action *A;
	int *labeling;
	longinteger_object go;

	labeling = NEW_int(nb_vertices);

	if (f_v) {
		cout << "create_graph before Nauty.create_automorphism_"
				"group_and_canonical_labeling_of_colored_graph_object" << endl;
	}
	A = Nauty.create_automorphism_group_and_canonical_labeling_of_colored_graph_object(
			&CG, labeling, verbose_level);
	if (f_v) {
		cout << "create_graph after Nauty.create_automorphism_"
				"group_and_canonical_labeling_of_colored_graph_object" << endl;
	}

	A->group_order(go);
	cout << "The automorphism group has order " << go << endl;
	cout << "The canonical labeling is:" << endl;
	int_vec_print(cout, labeling, nb_vertices);
	cout << endl;
	cout << "The automorphism group is generated by:\\\\" << endl;
	A->Strong_gens->print_generators_tex(cout);




	FREE_int(labeling);
	FREE_int(vertex_color);

	the_end(t0);
	//the_end_quietly(t0);
}

