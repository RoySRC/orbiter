/*
 * long_orbit.cpp
 *
 *  Created on: Apr 21, 2019
 *      Author: betten
 */



// long_orbit.cpp
//
// Anton Betten
// 3/24/2010
//
//
//
//
//

#include "orbiter.h"

using namespace std;


using namespace orbiter;




int main(int argc, char **argv);
void compute_orbit(int n, int k, int q, int print_mod, int verbose_level);
void prepare(int n, int k, finite_field *F);

int max_string_length;


// global data:

int t0; // the system time when the program started

int bit_length = 3;
int *base_cols;

int initial_M[] = {
        1, 0, 0, 0, 0, 4, 0, 4, 5, 5, 2, 0, 0, 5, 3, 2, 1, 2,
3, 3, 1,
        3, 3, 0, 0, 2, 3, 2, 6, 2, 0, 3, 6, 3, 0, 2, 1, 2, 1, 0, 5, 6,
3, 0, 2,

        0, 1, 0, 0, 0, 6, 0, 5, 5, 1, 2, 3, 3, 1, 0, 1, 4, 6,
5, 5, 2,
        4, 1, 3, 3, 3, 4, 6, 2, 5, 6, 3, 4, 6, 6, 4, 1, 4, 0, 5, 5, 3,
2, 5, 1,

	0, 0, 1, 0, 0, 1, 0, 6, 4, 3, 1, 2, 0, 2, 0, 3, 6, 1,
5, 6, 1,
        3, 5, 1, 6, 2, 2, 5, 5, 6, 4, 3, 0, 3, 6, 3, 3, 5, 4, 5, 2, 2,
4, 5, 3,

	0, 0, 0, 1, 0, 4, 0, 1, 1, 4, 5, 0, 1, 5, 2, 6, 3, 4,
6, 2, 4,
        2, 5, 5, 0, 6, 1, 0, 6, 1, 3, 5, 6, 5, 5, 0, 0, 5, 2, 2, 6, 6,
3, 3, 2,

	0, 0, 0, 0, 1, 4, 0, 3, 5, 2, 2, 2, 1, 1, 1, 4, 6, 4,
5, 2, 1,
        3, 0, 6, 1, 0, 3, 6, 3, 6, 5, 6, 2, 2, 4, 0, 2, 6, 3, 0, 5, 2,
6, 3, 1,

	0, 0, 0, 0, 0, 0, 1, 4, 3, 6, 3, 1, 3, 0, 4, 6, 2, 3,
4, 2, 1,
        5, 6, 4, 4, 6, 1, 5, 6, 6, 0, 3, 4, 6, 0, 5, 4, 3, 4, 6, 0, 3,
5, 3, 0
		};


int nb_gens = 2;



int data[] = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 4, 2, 5, 2, 5, 2, 2, 1,
6, 0,
    0, 0, 1, 4, 3, 3, 5, 0, 2, 3, 6, 1, 6, 0, 0, 1, 5, 5, 4, 6, 1, 1, 0,
6, 1,
    0, 3, 4, 5, 4, 1, 2, 1, 6, 6, 3, 2, 1, 2, 1, 4, 6, 2, 1, 1, 1, 3, 5,
2, 0,
    4, 5, 5, 1, 1, 0, 1, 2, 1, 3, 2, 5, 2, 4, 0, 4, 3, 0, 2, 5, 1, 1, 6,
1, 6,
    6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4,
4, 4,
    0, 0, 2, 0, 1, 6, 6, 4, 1, 3, 6, 5, 5, 2, 6, 6, 3, 5, 2, 5, 0, 2, 3,
3, 6,
    5, 6, 0, 3, 6, 3, 1, 2, 0, 1, 6, 5, 3, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 2, 2, 2, 5, 0, 6, 1,
6, 0,
    3, 2, 0, 0, 1, 6, 3, 6, 5, 6, 4, 5, 4, 2, 4, 0, 4, 3, 2, 2, 4, 1, 1,
3, 0,
    3, 6, 6, 2, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 1, 4, 0, 0, 2, 0, 2, 0, 3, 6, 4, 1, 0, 2, 2, 6, 1, 5, 5, 0, 5, 4,
5, 3,
    6, 2, 6, 6, 4, 0, 0, 1, 3, 4, 3, 4, 2, 4, 4, 1, 3, 6, 5, 2, 1, 1, 4,
4, 4,
    0, 2, 6, 2, 6, 0, 2, 3, 0, 2, 2, 4, 3, 5, 3, 5, 4, 2, 1, 1, 5, 1, 2,
5, 1,
    5, 3, 4, 6, 0, 6, 3, 0, 2, 6, 5, 4, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 6, 2, 4, 6, 4, 0, 2, 3, 5,
6, 1,
    3, 2, 5, 2, 1, 2, 2, 5, 2, 6, 3, 4, 6, 2, 4, 4, 1, 4, 3, 0, 4, 4, 0,
6, 4,
    2, 5, 2, 6, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0,




    1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1,
    0, 3, 3, 6, 0, 2, 5, 1, 3, 1, 6, 2, 3, 2, 6, 0, 4, 3, 2, 1, 2, 6, 1,
0, 1,
    1, 1, 2, 5, 6, 5, 3, 3, 4, 3, 0, 5, 0, 1, 1, 1, 3, 1, 1, 1, 0, 2, 0,
5, 1,
    1, 2, 3, 3, 1, 5, 2, 3, 3, 4, 5, 1, 1, 5, 3, 1, 6, 3, 5, 3, 1, 4, 5,
6, 3,
    6, 3, 4, 2, 5, 5, 2, 0, 3, 4, 4, 3, 5, 3, 0, 1, 4, 6, 6, 1, 6, 5, 2,
1, 0,
    1, 1, 3, 3, 5, 6, 4, 1, 4, 5, 3, 1, 6, 2, 0, 2, 1, 0, 6, 1, 5, 5, 0,
0, 5,
    1, 0, 4, 0, 0, 3, 5, 1, 3, 5, 3, 0, 3, 0, 4, 3, 3, 0, 3, 4, 0, 4, 4,
3, 1,
    0, 1, 3, 3, 0, 6, 0, 0, 6, 0, 4, 0, 4, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
0, 3,
    0, 0, 0, 0, 6, 0, 2, 2, 5, 3, 0, 4, 0, 3, 1, 4, 1, 4, 1, 3, 3, 3, 1,
1, 6,
    3, 5, 6, 2, 2, 0, 3, 6, 5, 5, 6, 6, 4, 4, 2, 6, 5, 5, 4, 0, 6, 0, 3,
0, 2,
    2, 0, 3, 2, 1, 6, 1, 2, 4, 4, 2, 6, 0, 4, 4, 3, 4, 3, 2, 2, 5, 5, 3,
0, 2,
    1, 2, 3, 6, 5, 1, 2, 3, 6, 2, 5, 1, 2, 5, 1, 5, 1, 2, 6, 3, 6, 2, 5,
3, 5,
    6, 5, 6, 6, 0, 2, 5, 0, 1, 1, 5, 3, 1, 0, 1, 1, 2, 1, 3, 4, 0, 2, 0,
2, 6,
    2, 2, 6, 5, 3, 5, 3, 0, 1, 3, 6, 2, 4, 2, 5, 3, 6, 1, 4, 1, 3, 3, 6,
2, 6,
    3, 1, 6, 4, 5, 3, 4, 0, 4, 2, 4, 6, 0, 5, 6, 0, 4, 5, 3, 0, 5, 4, 0,
1, 5,
    5, 2, 2, 4, 5, 2, 6, 6, 6, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 1, 0, 5, 6, 5, 3, 3, 1, 0, 5, 6, 5, 6,
5, 1,
    6, 3, 3, 0, 3, 2, 5, 2, 4, 1, 4, 1, 3, 2, 5, 0, 1, 0, 3, 1, 3, 1, 4,
5, 2,
    0, 0, 2, 0, 0, 2, 0, 4, 1, 0, 3, 6, 1, 0, 4, 4, 0, 1, 6, 1, 3, 0, 3,
0, 0,
    6, 0, 1, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 3, 0, 5, 2,
0, 4,
    2, 3, 0, 6, 2, 5, 5, 1, 6, 5, 2, 5, 4, 6, 6, 5, 2, 1, 5, 2, 6, 1, 0,
4, 3,
    2, 3, 5, 6, 6, 0, 2, 4, 2, 2, 2, 5, 0, 3, 4, 0, 0, 6, 1, 3, 4, 1, 0,
5, 0,
    4, 4, 6, 6, 3, 5, 6, 5, 0, 3, 6, 1, 3, 1, 3, 3, 4, 6, 0, 2, 3, 3, 1,
3, 0,
    6, 2, 2, 4, 6, 5, 3, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0,
    0, 0, 0, 0, 0, 0, 1, 6, 1, 4, 3, 0, 6, 4, 0, 2, 4, 6, 5, 0, 1, 2, 3,
0, 2,
    0, 5, 6, 1, 0, 4, 1, 2, 3, 0, 0, 2, 4, 3, 5, 3, 1, 5, 2, 1, 5, 2, 6,
0, 1, 4
    };



#if 0
const char *gens_ascii[]={
"010000000000000000000000000000000000000000000"
"100000000000000000000000000000000000000000000"
"000100000000000000000000000000000000000000000"
"001000000000000000000000000000000000000000000"
"000000100000000000000000000000000000000000000"
"000000010000000000000000000000000000000000000"
"000010000000000000000000000000000000000000000"
"000001000000000000000000000000000000000000000"
"000000000001000000000000000000000000000000000"
"000000000000010000000000000000000000000000000"
"000000000000000100000000000000000000000000000"
"000000001000000000000000000000000000000000000"
"000000000000000000100000000000000000000000000"
"000000000100000000000000000000000000000000000"
"000000000000000000001000000000000000000000000"
"000000000010000000000000000000000000000000000"
"000000000000000000000001000000000000000000000"
"000000000000000000000000010000000000000000000"
"000000000000100000000000000000000000000000000"
"000000000000000000000000000010000000000000000"
"000000000000001000000000000000000000000000000"
"000000000000000000000000000000010000000000000"
"000000000000000000000000000000001000000000000"
"000000000000000010000000000000000000000000000"
"000000000000000000000000000000000001000000000"
"000000000000000001000000000000000000000000000"
"000000000000000000000000000000000000010000000"
"000000000000000000000000000000000000000100000"
"000000000000000000010000000000000000000000000"
"000000000000000000000000000000000000000000100"
"000000000000000000000000000000000000000000001"
"000000000000000000000100000000000000000000000"
"000000000000000000000010000000000000000000000"
"616525616604325102202300661261245450614545114"
"461654335336264460313402645665006032331551321"
"000000000000000000000000100000000000000000000"
"316203112535426216125632420553513546642313045"
"000000000000000000000000001000000000000000000"
"023553640523415330433521143452304613125513151"
"000000000000000000000000000100000000000000000"
"624520240160626440330100164245415631623660366"
"124022401230603013215121351640251660312425043"
"000000000000000000000000000001000000000000000"
"651403610034123615043414430601423302152464632"
"000000000000000000000000000000100000000000000"
,
"340000000000000000000000000000000000000000000"
"001000000000000000000000000000000000000000000"
"000010000000000000000000000000000000000000000"
"000001000000000000000000000000000000000000000"
"115040000000000000000000000000000000000000000"
"000000001000000000000000000000000000000000000"
"000000000100000000000000000000000000000000000"
"000000000010000000000000000000000000000000000"
"000000000000100000000000000000000000000000000"
"000000000000001000000000000000000000000000000"
"000000000000000010000000000000000000000000000"
"000000000000000001000000000000000000000000000"
"000100000000000000000000000000000000000000000"
"000000000000000000010000000000000000000000000"
"000000000000000000000100000000000000000000000"
"000000000000000000000010000000000000000000000"
"000000000000000000000000100000000000000000000"
"000000000000000000000000001000000000000000000"
"000000000000000000000000000100000000000000000"
"000000000000000000000000000001000000000000000"
"000000000000000000000000000000100000000000000"
"000000100000000000000000000000000000000000000"
"000000000000000000000000000000000100000000000"
"000000000000000000000000000000000010000000000"
"000000010000000000000000000000000000000000000"
"000000000000000000000000000000000000100000000"
"000000000000000000000000000000000000001000000"
"000000000000000000000000000000000000000010000"
"000000000000000000000000000000000000000001000"
"000000000000000000000000000000000000000000010"
"645005313645535201203450552633241335626661043"
"104543053503431453241420564205622552602125613"
"064254232614146565322216364663164201115344266"
"304324643130406140000160300000000100000000000"
"222460063532242126613053453543516223454066456"
"555166315502412530304455500566642460040363455"
"261556001261062645646502005305511300421131460"
"521122610322036345014400664500643106300016515"
"000000000001000000000000000000000000000000000"
"660564403514400121324640361326345456446352300"
"601146321453623024150400503602000000004010050"
"064224514513364151541262055322151501035410104"
"313060634612251234340020116160424124612311261"
"000000000000010000000000000000000000000000000"
"106264603233646364532653635043100634102060552"
};
#endif


int *gens[2];


int main(int argc, char **argv)
{
	int i, verbose_level;
	int n, k, q;
	int print_mod = 1000;

	t0 = os_ticks();

	for (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-v") == 0) {
			verbose_level = atoi(argv[++i]);
			cout << "-v " << verbose_level << endl;
			}
		else if (strcmp(argv[i], "-print_mod") == 0) {
			print_mod = atoi(argv[++i]);
			cout << "-print_mod " << print_mod << endl;
			}
		}
	n = 45;
	k = 6;
	q = 7;
	cout << "q=" << q << endl;

	//discreta_init();

	compute_orbit(n, k, q, print_mod, verbose_level);

	//the_end(t0);
	the_end_quietly(t0);
}

	int **Orbit;

void compute_orbit(int n, int k, int q, int print_mod, int verbose_level)
{
	int f_v = (verbose_level >= 1);
	int kn = k * n;
	int i, length, nb_processed = 0;
	int f_found;
	int *M1, *M2;
	int alloc_length = 500000;
	int old_length = alloc_length;
	int next_length = 0;

	std::multimap<uint32_t, int> Hashing;
		// we store the pair (hash, idx)
		// where hash is the hash value of the set and idx is the
		// index in the table Sets where the set is stored.
		//
		// we use a multimap because the hash values are not unique
		// it happens that two sets have the same hash value.
		// map cannot handle that.


	finite_field F;

	if (f_v) {
		cout << "compute_orbit" << endl;
	}


	F.init(q, 0);




	M2 = NEW_int(k * n);
	cout << "allocating Orbit" << endl;
	Orbit = NEW_pint(alloc_length);



	prepare(n, k, &F);
	F.Gauss_simple(initial_M, k, n, base_cols, 0/* verbose_level*/);
	Orbit[0] = NEW_int(k * n);
	int_vec_copy(initial_M, Orbit[0], kn);

	uint32_t hash;

	hash = int_vec_hash(Orbit[0], kn);
	Hashing.insert(pair<uint32_t, int>(hash, 0));
	length = 1;

	while (nb_processed < length) {

#if 0
		if ((f_vv && (nb_processed % print_mod) == 0) || f_vvv) {
			cout << "working on element " << nb_processed
				<< " length=" << length
				<< endl;
			}
#endif

		M1 = Orbit[nb_processed];
		for (i = 0; i < nb_gens; i++) {

			F.mult_matrix_matrix(M1, gens[i], M2, k, n, n,
					0 /* verbose_level */);
			F.Gauss_simple(M2, k, n, base_cols, 0/* verbose_level*/);

			f_found = FALSE;
			hash = int_vec_hash(M2, kn);

		    map<uint32_t, int>::iterator itr, itr1, itr2;
		    int pos, f_found;

		    itr1 = Hashing.lower_bound(hash);
		    itr2 = Hashing.upper_bound(hash);
		    f_found = FALSE;
		    for (itr = itr1; itr != itr2; ++itr) {
		        pos = itr->second;
		        if (int_vec_compare(M2, Orbit[pos], kn) == 0) {
		        	f_found = TRUE;
		        	break;
		        }
		    }
		    if (!f_found) {
				Orbit[length] = NEW_int(kn);
				int_vec_copy(M2, Orbit[length], kn);
				Hashing.insert(pair<uint32_t, int>(hash, length));
				length++;
				if ((length % 1024) == 0) {
					cout << "nb_processed=" << nb_processed
						<< ", current orbit length = " << length << endl;
				}
				if (length == alloc_length) {
					next_length = alloc_length + old_length;
					cout << "reallocating to length " << next_length << endl;
					int **O = NEW_pint(next_length);
					for (int t = 0; t < alloc_length; t++) {
						O[t] = Orbit[t];
					}
					FREE_pint(Orbit);
					Orbit = O;
					old_length = alloc_length;
					alloc_length = next_length;
					cout << "done " << endl;
				}
		    }
		} // next i

	nb_processed++;

	}
	cout << "found an orbit of length " << length << endl;
}

void prepare(int n, int k, finite_field *F)
{
	int i;

	for (i = 0; i < 2; i++) {
		gens[i] = NEW_int(n * n);
		int_vec_copy(data + i * n * n, gens[i], n * n);
		print_integer_matrix_width(cout, gens[i], n, n, n, F->log10_of_q);
		cout << endl;
		}
	max_string_length = k * n + 1;
	cout << "max_string_length=" << max_string_length << endl;
	base_cols = NEW_int(n);
}
