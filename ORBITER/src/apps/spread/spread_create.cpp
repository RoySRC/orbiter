// spread_create.C
// 
// Anton Betten
//
// March 22, 2018
//
//
// 
//
//

#include "orbiter.h"

// global data:

int t0; // the system time when the program started

int main(int argc, const char **argv);

int main(int argc, const char **argv)
{
	int verbose_level = 0;
	int i;
	int f_description = FALSE;
	spread_create_description *Descr;
	int nb_transform = 0;
	const char *transform_coeffs[1000];
	int f_inverse_transform[1000];

	t0 = os_ticks();


	for (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-v") == 0) {
			verbose_level = atoi(argv[++i]);
			cout << "-v " << verbose_level << endl;
			}
		else if (strcmp(argv[i], "-description") == 0) {
			f_description = TRUE;
			Descr = NEW_OBJECT(spread_create_description);
			i += Descr->read_arguments(argc - (i - 1),
					argv + i, verbose_level) - 1;

			cout << "-description" << endl;
			}
		else if (strcmp(argv[i], "-transform") == 0) {
			transform_coeffs[nb_transform] = argv[++i];
			f_inverse_transform[nb_transform] = FALSE;
			cout << "-transform "
					<< transform_coeffs[nb_transform] << endl;
			nb_transform++;
			}
		else if (strcmp(argv[i], "-transform_inverse") == 0) {
			transform_coeffs[nb_transform] = argv[++i];
			f_inverse_transform[nb_transform] = TRUE;
			cout << "-transform_inverse "
					<< transform_coeffs[nb_transform] << endl;
			nb_transform++;
			}
		}
	if (!f_description) {
		cout << "please use option -description ... to enter "
				"a description of the surface" << endl;
		exit(1);
		}

	spread_create *SC;

	SC = NEW_OBJECT(spread_create);

	cout << "before SC->init" << endl;
	SC->init(Descr, verbose_level);
	cout << "after SC->init" << endl;
	

	if (nb_transform) {
		cout << "before SC->apply_transformations" << endl;
		SC->apply_transformations(transform_coeffs,
				f_inverse_transform, nb_transform, verbose_level);
		cout << "after SC->apply_transformations" << endl;
		}

	action *A;
	//int *Elt1;
	int *Elt2;
	
	A = SC->A;

	Elt2 = NEW_int(A->elt_size_in_int);
	


#if 0
	if (SC->f_has_group) {
		for (i = 0; i < SC->Sg->gens->len; i++) {
			cout << "Testing generator " << i << " / "
					<< SC->Sg->gens->len << endl;
			A->element_invert(BC->Sg->gens->ith(i), Elt2,
					0 /*verbose_level*/);
	
			BC->Surf->substitute_semilinear(SC->coeffs, coeffs_out,
					FALSE /* f_semilinear */, 0, Elt2,
					0 /*verbose_level*/);

			PG_element_normalize(*SC->F, coeffs_out, 1, 20);


			if (int_vec_compare(SC->coeffs, coeffs_out, 20)) {
				cout << "error, the transformation does not preserve "
						"the equation of the surface" << endl;
				exit(1);
				}
			cout << "Generator " << i << " / " << SC->Sg->gens->len
					<< " is good" << endl;
			}
		}
	else {
		cout << "We do not have information about "
				"the automorphism group" << endl;
		}
#endif


	cout << "We have created the following spread set:" << endl;
	cout << "$$" << endl;
	int_set_print_tex(cout, SC->set, SC->sz);
	cout << endl;
	cout << "$$" << endl;

	if (SC->f_has_group) {
		cout << "The stabilizer is generated by:" << endl;
		SC->Sg->print_generators_tex(cout);
		}


	


	FREE_int(Elt2);

	FREE_OBJECT(SC);

	the_end(t0);
	//the_end_quietly(t0);
}

