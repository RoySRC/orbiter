// create_BLT_set_main.C
// 
// Anton Betten
//
// March 17, 2018
//
//
// 
//
//

#include "orbiter.h"

using namespace orbiter;

// global data:

int t0; // the system time when the program started

int main(int argc, const char **argv);

int main(int argc, const char **argv)
{
	int verbose_level = 0;
	int i;
	int f_description = FALSE;
	BLT_set_create_description *Descr;
	int nb_transform = 0;
	const char *transform_coeffs[1000];
	int f_inverse_transform[1000];

	t0 = os_ticks();


	for (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-v") == 0) {
			verbose_level = atoi(argv[++i]);
			cout << "-v " << verbose_level << endl;
			}
		else if (strcmp(argv[i], "-description") == 0) {
			f_description = TRUE;
			Descr = NEW_OBJECT(BLT_set_create_description);
			i += Descr->read_arguments(argc - (i - 1),
					argv + i, verbose_level) - 1;

			cout << "-description" << endl;
			}
		else if (strcmp(argv[i], "-transform") == 0) {
			transform_coeffs[nb_transform] = argv[++i];
			f_inverse_transform[nb_transform] = FALSE;
			cout << "-transform " << transform_coeffs[nb_transform] << endl;
			nb_transform++;
			}
		else if (strcmp(argv[i], "-transform_inverse") == 0) {
			transform_coeffs[nb_transform] = argv[++i];
			f_inverse_transform[nb_transform] = TRUE;
			cout << "-transform_inverse "
					<< transform_coeffs[nb_transform] << endl;
			nb_transform++;
			}
		}
	if (!f_description) {
		cout << "please use option -description ... "
				"to enter a description of the surface" << endl;
		exit(1);
		}

	BLT_set_create *BC;
	//int j;

	BC = NEW_OBJECT(BLT_set_create);

	cout << "before BC->init" << endl;
	BC->init(Descr, verbose_level);
	cout << "after BC->init" << endl;
	

	if (nb_transform) {
		cout << "before BC->apply_transformations" << endl;
		BC->apply_transformations(transform_coeffs,
				f_inverse_transform, nb_transform, verbose_level);
		cout << "after BC->apply_transformations" << endl;
		}

	action *A;
	//int *Elt1;
	int *Elt2;
	
	A = BC->A;

	Elt2 = NEW_int(A->elt_size_in_int);
	


#if 0
	if (BC->f_has_group) {
		for (i = 0; i < BC->Sg->gens->len; i++) {
			cout << "Testing generator " << i << " / "
					<< BC->Sg->gens->len << endl;
			A->element_invert(BC->Sg->gens->ith(i),
					Elt2, 0 /*verbose_level*/);
	

			cout << "Generator " << i << " / " << SC->Sg->gens->len
					<< " is good" << endl;
			}
		}
	else {
		cout << "We do not have information about the "
				"automorphism group" << endl;
		}
#endif


	cout << "We have created the following BLT-set:" << endl;
	cout << "$$" << endl;
	int_set_print_tex(cout, BC->set, BC->q + 1);
	cout << endl;
	cout << "$$" << endl;

	if (BC->f_has_group) {
		cout << "The stabilizer is generated by:" << endl;
		BC->Sg->print_generators_tex(cout);
		}


	


	FREE_int(Elt2);

	FREE_OBJECT(BC);

	the_end(t0);
	//the_end_quietly(t0);
}

