/*
 * crc_object.cpp
 *
 *  Created on: Feb 27, 2023
 *      Author: betten
 */




#include "foundations.h"

using namespace std;



namespace orbiter {
namespace layer1_foundations {
namespace coding_theory {





crc_object::crc_object()
{

	Descr = NULL;

	Crc_object_type = t_crc_unknown;

	Len_total_in_symbols = 0;
	Len_total_in_bits = 0;
	Len_total_in_bytes = 0;

	Len_check_in_symbols = 0;
	Len_check_in_bits = 0;
	Len_check_in_bytes = 0;

	Len_info_in_symbols = 0;
	Len_info_in_bits = 0;
	Len_info_in_bytes = 0;


	block_length_in_bytes = 0;
	info_length_in_bytes = 0;
	info_length_in_symbols = 0;

	number_of_symbols_per_byte = 0;
	symbol_set_size_log = 0;
	symbol_set_size = 0;

	Data = NULL; // [Len_total]
	Check = NULL; // [Len_check]

	Bitvector = NULL;
}

crc_object::~crc_object()
{
	if (Data) {
		FREE_char((char *) Data);
	}
	if (Check) {
		FREE_char((char *) Check);
	}
	if (Bitvector) {
		FREE_OBJECT(Bitvector);
	}
}

void crc_object::init(
		crc_code_description *Descr, int verbose_level)
// block_length is needed for crc32
{
	int f_v = (verbose_level >= 1);

	if (f_v) {
		cout << "crc_object::init" << endl;
	}


	crc_object::Descr = Descr;

	if (Descr->f_block_length) {
		cout << "crc_object::init block_length = " << Descr->block_length << endl;
	}


	data_structures::string_tools ST;



	if (ST.stringcmp(Descr->type, "alfa") == 0) {

		Crc_object_type = t_crc_alfa;
		Len_total_in_symbols = 771;
		Len_check_in_symbols = 3;
		symbol_set_size_log = 8;
		symbol_set_size = 256;

		label_txt = "Alfa";
		label_tex = "Alfa";

	}
	else if (ST.stringcmp(Descr->type, "bravo") == 0) {

		Crc_object_type = t_crc_bravo;
		Len_total_in_symbols = 771;
		Len_check_in_symbols = 4;
		symbol_set_size_log = 8;
		symbol_set_size = 256;

		label_txt = "Bravo";
		label_tex = "Bravo";

	}
	else if (ST.stringcmp(Descr->type, "charlie") == 0) {

		Crc_object_type = t_crc_charlie;
		Len_total_in_symbols = 771;
		Len_check_in_symbols = 12;
		symbol_set_size_log = 8;
		symbol_set_size = 256;

		label_txt = "Charlie";
		label_tex = "Charlie";

	}
	else if (ST.stringcmp(Descr->type, "Delta") == 0) {

		Crc_object_type = t_crc_Delta;
		Len_total_in_symbols = 51;
		Len_check_in_symbols = 4;
		symbol_set_size_log = 4;
		symbol_set_size = 16;

		label_txt = "Delta";
		label_tex = "Delta";

	}
	else if (ST.stringcmp(Descr->type, "Echo") == 0) {

		Crc_object_type = t_crc_Echo;
		Len_total_in_symbols = 51;
		Len_check_in_symbols = 8;
		symbol_set_size_log = 4;
		symbol_set_size = 16;

		label_txt = "Echo";
		label_tex = "Echo";

	}
	else if (ST.stringcmp(Descr->type, "Foxtrot") == 0) {

		Crc_object_type = t_crc_Foxtrot;
		Len_total_in_symbols = 15;
		Len_check_in_symbols = 4;
		symbol_set_size_log = 4;
		symbol_set_size = 16;

		label_txt = "Foxtrot";
		label_tex = "Foxtrot";

	}
	else if (ST.stringcmp(Descr->type, "crc32") == 0) {

		Crc_object_type = t_crc_crc32;
		block_length_in_bytes = Descr->block_length;
		Len_total_in_symbols = block_length_in_bytes * 8;
		Len_check_in_symbols = 32;
		symbol_set_size_log = 1;
		symbol_set_size = 2;

		label_txt = "crc32";
		label_tex = "crc32";

	}
	else if (ST.stringcmp(Descr->type, "crc16") == 0) {

		Crc_object_type = t_crc_crc16;
		block_length_in_bytes = Descr->block_length;
		Len_total_in_symbols = block_length_in_bytes * 8;
		Len_check_in_symbols = 16;
		symbol_set_size_log = 1;
		symbol_set_size = 2;

		label_txt = "crc16";
		label_tex = "crc16";

	}
	else if (ST.stringcmp(Descr->type, "SuperFastHash32") == 0) {

		Crc_object_type = t_crc_SuperFastHash32;
		block_length_in_bytes = Descr->block_length;
		Len_total_in_symbols = block_length_in_bytes * 8;
		Len_check_in_symbols = 32;
		symbol_set_size_log = 1;
		symbol_set_size = 2;

		label_txt = "SuperFastHash32";
		label_tex = "SuperFastHash32";

	}
	else {
		cout << "crc_object::init "
				"the crc type is unrecognized: " << Descr->type << endl;
		exit(1);
	}

	number_of_symbols_per_byte = 8 / symbol_set_size_log;

	Len_total_in_bits = Len_total_in_symbols * symbol_set_size_log;
	Len_total_in_bytes = (Len_total_in_bits + 7) / 8;

	Len_check_in_bits = Len_check_in_symbols * symbol_set_size_log;
	Len_check_in_bytes = (Len_check_in_bits + 7) / 8;

	Len_info_in_bits = Len_total_in_bits - Len_check_in_bits;
	Len_info_in_bytes = Len_total_in_bytes - Len_check_in_bytes;
	Len_info_in_symbols = Len_total_in_symbols - Len_check_in_symbols;

	block_length_in_bytes = Len_total_in_bits / 8;
	info_length_in_bytes = block_length_in_bytes  - Len_check_in_bytes;
	info_length_in_symbols = info_length_in_bytes * number_of_symbols_per_byte;

	Data = (unsigned char *) NEW_char(Len_total_in_bytes);
	Check = (unsigned char *) NEW_char(Len_check_in_bytes);

	Bitvector = NEW_OBJECT(data_structures::bitvector);
	Bitvector->allocate(Len_total_in_bits);


	if (f_v) {
		cout << "crc_object::init done" << endl;
	}
}

#if 0
void crc_object::encode_as_bitvector()
{
	Bitvector->zero();

	int u, v, t, b;
	unsigned char c;

	t = 0;
	for (u = 0; u < block_length_in_bytes; u++) {
		c = Data[u];
		for (v = 0; v < 8; v++, t++) {
			b = c % 2;
			c >>= 1;
			if (b) {
				Bitvector->set_bit(t);
			}
		}
	}
}
#endif

void crc_object::print()
{
	if (Crc_object_type == t_crc_alfa) {
		cout << "type = alfa" << endl;
	}
	else if (Crc_object_type == t_crc_bravo) {
		cout << "type = bravo" << endl;
	}
	else if (Crc_object_type == t_crc_charlie) {
		cout << "type = charlie" << endl;
	}
	else if (Crc_object_type == t_crc_Delta) {
		cout << "type = Delta" << endl;
	}
	else if (Crc_object_type == t_crc_Echo) {
		cout << "type = Echo" << endl;
	}
	else if (Crc_object_type == t_crc_Foxtrot) {
		cout << "type = Foxtrot" << endl;
	}
	else if (Crc_object_type == t_crc_crc32) {
		cout << "type = crc32" << endl;
	}
	else if (Crc_object_type == t_crc_crc16) {
		cout << "type = crc16" << endl;
	}
	else if (Crc_object_type == t_crc_SuperFastHash32) {
		cout << "type = SuperFastHash32" << endl;
	}

	cout << "Len_total_in_symbols = " << Len_total_in_symbols << endl;
	cout << "Len_total_in_bits = " << Len_total_in_bits << endl;
	cout << "Len_total_in_bytes = " << Len_total_in_bytes << endl;

	cout << "Len_check_in_symbols = " << Len_check_in_symbols << endl;
	cout << "Len_check_in_bits = " << Len_check_in_bits << endl;
	cout << "Len_check_in_bytes = " << Len_check_in_bytes << endl;

	cout << "Len_info_in_symbols = " << Len_info_in_symbols << endl;
	cout << "Len_info_in_bits = " << Len_info_in_bits << endl;
	cout << "Len_info_in_bytes = " << Len_info_in_bytes << endl;

	cout << "block_length_in_bytes = " << block_length_in_bytes << endl;
	cout << "info_length_in_bytes = " << info_length_in_bytes << endl;
	cout << "info_length_in_symbols = " << info_length_in_symbols << endl;

	cout << "number_of_symbols_per_byte = " << number_of_symbols_per_byte << endl;
	cout << "symbol_set_size_log = " << symbol_set_size_log << endl;
	cout << "symbol_set_size = " << symbol_set_size << endl;
}


long int crc_object::get_nb_blocks(
		long int N)
{
	long int nb_blocks;

	nb_blocks = (N + info_length_in_bytes - 1) / info_length_in_bytes;

	return nb_blocks;
}

long int crc_object::get_this_block_size(
		long int N, long int cnt)
{
	long int L;

	if ((cnt + 1) * info_length_in_bytes > N) {
		L = N - cnt * info_length_in_bytes;
	}
	else {
		L = info_length_in_bytes;
	}
	return L;

}


void crc_object::divide(
		const unsigned char *in, unsigned char *out)
{
	if (Crc_object_type == t_crc_alfa) {
		divide_alfa(in, out);
	}
	else if (Crc_object_type == t_crc_bravo) {
		divide_bravo(in, out);
	}
	else if (Crc_object_type == t_crc_charlie) {
		divide_charlie(in, out);
	}
	else if (Crc_object_type == t_crc_Delta) {
		divide_Delta(in, out);
	}
	else if (Crc_object_type == t_crc_Echo) {
		divide_Echo(in, out);
	}
	else if (Crc_object_type == t_crc_Foxtrot) {
		divide_Foxtrot(in, out);
	}
	else if (Crc_object_type == t_crc_crc32) {
		divide_crc32(in + Len_check_in_bytes, info_length_in_bytes, out);
	}
	else if (Crc_object_type == t_crc_crc16) {
		divide_crc16(in + Len_check_in_bytes, info_length_in_bytes, out);
	}
	else if (Crc_object_type == t_crc_SuperFastHash32) {
		SuperFastHash32(in + Len_check_in_bytes, info_length_in_bytes, out);
	}
	else {
		cout << "crc_object::divide Crc_object_type is unrecognized" << endl;
		exit(1);
	}

}

void crc_object::expand(
		const unsigned char *in, unsigned char *out)
{
	data_structures::algorithms Algo;

	if (Crc_object_type == t_crc_alfa) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_bravo) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_charlie) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_Delta) {
		Algo.uchar_expand_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_Echo) {
		Algo.uchar_expand_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_Foxtrot) {
		Algo.uchar_expand_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_crc32) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_crc16) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_SuperFastHash32) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else {
		cout << "crc_object::expand Crc_object_type is unrecognized" << endl;
		exit(1);
	}

}

void crc_object::compress(
		const unsigned char *in, unsigned char *out)
{
	data_structures::algorithms Algo;

	if (Crc_object_type == t_crc_alfa) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_bravo) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_charlie) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_Delta) {
		Algo.uchar_compress_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_Echo) {
		Algo.uchar_compress_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_Foxtrot) {
		Algo.uchar_compress_4(in, out, Len_total_in_symbols);
	}
	else if (Crc_object_type == t_crc_crc32) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_crc16) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else if (Crc_object_type == t_crc_SuperFastHash32) {
		Algo.uchar_move(in, out, Len_total_in_bytes);
	}
	else {
		cout << "crc_object::compress Crc_object_type is unrecognized" << endl;
		exit(1);
	}

}

void crc_object::compress_check(
		const unsigned char *in, unsigned char *out)
{
	data_structures::algorithms Algo;

	if (Crc_object_type == t_crc_alfa) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else if (Crc_object_type == t_crc_bravo) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else if (Crc_object_type == t_crc_charlie) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else if (Crc_object_type == t_crc_Delta) {
		Algo.uchar_compress_4(in, out, Len_check_in_symbols);
	}
	else if (Crc_object_type == t_crc_Echo) {
		Algo.uchar_compress_4(in, out, Len_check_in_symbols);
	}
	else if (Crc_object_type == t_crc_Foxtrot) {
		Algo.uchar_compress_4(in, out, Len_check_in_symbols);
	}
	else if (Crc_object_type == t_crc_crc32) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else if (Crc_object_type == t_crc_crc16) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else if (Crc_object_type == t_crc_SuperFastHash32) {
		Algo.uchar_move(in, out, Len_check_in_bytes);
	}
	else {
		cout << "crc_object::compress_check Crc_object_type is unrecognized" << endl;
		exit(1);
	}

}





// alfa:

// crc code parameters: q256_n771_r2
// the size of the array crc_poly_table_alfa is  255 x 3
const unsigned char crc_poly_table_alfa[] = {
214,167,  1,
177, 83,  2,
103,244,  3,
127,166,  4,
169,  1,  5,
206,245,  6,
 24, 82,  7,
254, 81,  8,
 40,246,  9,
 79,  2, 10,
153,165, 11,
129,247, 12,
 87, 80, 13,
 48,164, 14,
230,  3, 15,
225,162, 16,
 55,  5, 17,
 80,241, 18,
134, 86, 19,
158,  4, 20,
 72,163, 21,
 47, 87, 22,
249,240, 23,
 31,243, 24,
201, 84, 25,
174,160, 26,
120,  7, 27,
 96, 85, 28,
182,242, 29,
209,  6, 30,
  7,161, 31,
223, 89, 32,
  9,254, 33,
110, 10, 34,
184,173, 35,
160,255, 36,
118, 88, 37,
 17,172, 38,
199, 11, 39,
 33,  8, 40,
247,175, 41,
144, 91, 42,
 70,252, 43,
 94,174, 44,
136,  9, 45,
239,253, 46,
 57, 90, 47,
 62,251, 48,
232, 92, 49,
143,168, 50,
 89, 15, 51,
 65, 93, 52,
151,250, 53,
240, 14, 54,
 38,169, 55,
192,170, 56,
 22, 13, 57,
113,249, 58,
167, 94, 59,
191, 12, 60,
105,171, 61,
 14, 95, 62,
216,248, 63,
163,178, 64,
117, 21, 65,
 18,225, 66,
196, 70, 67,
220, 20, 68,
 10,179, 69,
109, 71, 70,
187,224, 71,
 93,227, 72,
139, 68, 73,
236,176, 74,
 58, 23, 75,
 34, 69, 76,
244,226, 77,
147, 22, 78,
 69,177, 79,
 66, 16, 80,
148,183, 81,
243, 67, 82,
 37,228, 83,
 61,182, 84,
235, 17, 85,
140,229, 86,
 90, 66, 87,
188, 65, 88,
106,230, 89,
 13, 18, 90,
219,181, 91,
195,231, 92,
 21, 64, 93,
114,180, 94,
164, 19, 95,
124,235, 96,
170, 76, 97,
205,184, 98,
 27, 31, 99,
  3, 77,100,
213,234,101,
178, 30,102,
100,185,103,
130,186,104,
 84, 29,105,
 51,233,106,
229, 78,107,
253, 28,108,
 43,187,109,
 76, 79,110,
154,232,111,
157, 73,112,
 75,238,113,
 44, 26,114,
250,189,115,
226,239,116,
 52, 72,117,
 83,188,118,
133, 27,119,
 99, 24,120,
181,191,121,
210, 75,122,
  4,236,123,
 28,190,124,
202, 25,125,
173,237,126,
123, 74,127,
 91,121,128,
141,222,129,
234, 42,130,
 60,141,131,
 36,223,132,
242,120,133,
149,140,134,
 67, 43,135,
165, 40,136,
115,143,137,
 20,123,138,
194,220,139,
218,142,140,
 12, 41,141,
107,221,142,
189,122,143,
186,219,144,
108,124,145,
 11,136,146,
221, 47,147,
197,125,148,
 19,218,149,
116, 46,150,
162,137,151,
 68,138,152,
146, 45,153,
245,217,154,
 35,126,155,
 59, 44,156,
237,139,157,
138,127,158,
 92,216,159,
132, 32,160,
 82,135,161,
 53,115,162,
227,212,163,
251,134,164,
 45, 33,165,
 74,213,166,
156,114,167,
122,113,168,
172,214,169,
203, 34,170,
 29,133,171,
  5,215,172,
211,112,173,
180,132,174,
 98, 35,175,
101,130,176,
179, 37,177,
212,209,178,
  2,118,179,
 26, 36,180,
204,131,181,
171,119,182,
125,208,183,
155,211,184,
 77,116,185,
 42,128,186,
252, 39,187,
228,117,188,
 50,210,189,
 85, 38,190,
131,129,191,
248,203,192,
 46,108,193,
 73,152,194,
159, 63,195,
135,109,196,
 81,202,197,
 54, 62,198,
224,153,199,
  6,154,200,
208, 61,201,
183,201,202,
 97,110,203,
121, 60,204,
175,155,205,
200,111,206,
 30,200,207,
 25,105,208,
207,206,209,
168, 58,210,
126,157,211,
102,207,212,
176,104,213,
215,156,214,
  1, 59,215,
231, 56,216,
 49,159,217,
 86,107,218,
128,204,219,
152,158,220,
 78, 57,221,
 41,205,222,
255,106,223,
 39,146,224,
241, 53,225,
150,193,226,
 64,102,227,
 88, 52,228,
142,147,229,
233,103,230,
 63,192,231,
217,195,232,
 15,100,233,
104,144,234,
190, 55,235,
166,101,236,
112,194,237,
 23, 54,238,
193,145,239,
198, 48,240,
 16,151,241,
119, 99,242,
161,196,243,
185,150,244,
111, 49,245,
  8,197,246,
222, 98,247,
 56, 97,248,
238,198,249,
137, 50,250,
 95,149,251,
 71,199,252,
145, 96,253,
246,148,254,
 32, 51,255,
};

void crc_object::divide_alfa(
		const unsigned char *in771, unsigned char *out2)
{
	unsigned char R[771];
	int i, ii, jj;
	int x;
	for (i = 0; i < 771; i++) {
		R[i] = in771[i];
	}

	for (i = 770; i >= 2; i--) {
		x = R[i];
		if (x == 0) {
			continue;
		}
		//cout << "i=" << i << " x=" << x << endl;
		x--;
		for (ii = i, jj = 2; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_alfa[x * 3 + jj];
		}
	}

	for (i = 1; i >= 0; i--) {
		out2[i] = R[i];
	}
}


// bravo:

// crc code parameters: q256_n771_r4
// the size of the array crc_poly_table_bravo is  255 x 5
const unsigned char crc_poly_table_bravo[] = {
  1, 23, 27,213,  1,
  2, 46, 54,183,  2,
  3, 57, 45, 98,  3,
  4, 92,108,115,  4,
  5, 75,119,166,  5,
  6,114, 90,196,  6,
  7,101, 65, 17,  7,
  8,184,216,230,  8,
  9,175,195, 51,  9,
 10,150,238, 81, 10,
 11,129,245,132, 11,
 12,228,180,149, 12,
 13,243,175, 64, 13,
 14,202,130, 34, 14,
 15,221,153,247, 15,
 16,109,173,209, 16,
 17,122,182,  4, 17,
 18, 67,155,102, 18,
 19, 84,128,179, 19,
 20, 49,193,162, 20,
 21, 38,218,119, 21,
 22, 31,247, 21, 22,
 23,  8,236,192, 23,
 24,213,117, 55, 24,
 25,194,110,226, 25,
 26,251, 67,128, 26,
 27,236, 88, 85, 27,
 28,137, 25, 68, 28,
 29,158,  2,145, 29,
 30,167, 47,243, 30,
 31,176, 52, 38, 31,
 32,218, 71,191, 32,
 33,205, 92,106, 33,
 34,244,113,  8, 34,
 35,227,106,221, 35,
 36,134, 43,204, 36,
 37,145, 48, 25, 37,
 38,168, 29,123, 38,
 39,191,  6,174, 39,
 40, 98,159, 89, 40,
 41,117,132,140, 41,
 42, 76,169,238, 42,
 43, 91,178, 59, 43,
 44, 62,243, 42, 44,
 45, 41,232,255, 45,
 46, 16,197,157, 46,
 47,  7,222, 72, 47,
 48,183,234,110, 48,
 49,160,241,187, 49,
 50,153,220,217, 50,
 51,142,199, 12, 51,
 52,235,134, 29, 52,
 53,252,157,200, 53,
 54,197,176,170, 54,
 55,210,171,127, 55,
 56, 15, 50,136, 56,
 57, 24, 41, 93, 57,
 58, 33,  4, 63, 58,
 59, 54, 31,234, 59,
 60, 83, 94,251, 60,
 61, 68, 69, 46, 61,
 62,125,104, 76, 62,
 63,106,115,153, 63,
 64,169,142, 99, 64,
 65,190,149,182, 65,
 66,135,184,212, 66,
 67,144,163,  1, 67,
 68,245,226, 16, 68,
 69,226,249,197, 69,
 70,219,212,167, 70,
 71,204,207,114, 71,
 72, 17, 86,133, 72,
 73,  6, 77, 80, 73,
 74, 63, 96, 50, 74,
 75, 40,123,231, 75,
 76, 77, 58,246, 76,
 77, 90, 33, 35, 77,
 78, 99, 12, 65, 78,
 79,116, 23,148, 79,
 80,196, 35,178, 80,
 81,211, 56,103, 81,
 82,234, 21,  5, 82,
 83,253, 14,208, 83,
 84,152, 79,193, 84,
 85,143, 84, 20, 85,
 86,182,121,118, 86,
 87,161, 98,163, 87,
 88,124,251, 84, 88,
 89,107,224,129, 89,
 90, 82,205,227, 90,
 91, 69,214, 54, 91,
 92, 32,151, 39, 92,
 93, 55,140,242, 93,
 94, 14,161,144, 94,
 95, 25,186, 69, 95,
 96,115,201,220, 96,
 97,100,210,  9, 97,
 98, 93,255,107, 98,
 99, 74,228,190, 99,
100, 47,165,175,100,
101, 56,190,122,101,
102,  1,147, 24,102,
103, 22,136,205,103,
104,203, 17, 58,104,
105,220, 10,239,105,
106,229, 39,141,106,
107,242, 60, 88,107,
108,151,125, 73,108,
109,128,102,156,109,
110,185, 75,254,110,
111,174, 80, 43,111,
112, 30,100, 13,112,
113,  9,127,216,113,
114, 48, 82,186,114,
115, 39, 73,111,115,
116, 66,  8,126,116,
117, 85, 19,171,117,
118,108, 62,201,118,
119,123, 37, 28,119,
120,166,188,235,120,
121,177,167, 62,121,
122,136,138, 92,122,
123,159,145,137,123,
124,250,208,152,124,
125,237,203, 77,125,
126,212,230, 47,126,
127,195,253,250,127,
128, 79,  1,198,128,
129, 88, 26, 19,129,
130, 97, 55,113,130,
131,118, 44,164,131,
132, 19,109,181,132,
133,  4,118, 96,133,
134, 61, 91,  2,134,
135, 42, 64,215,135,
136,247,217, 32,136,
137,224,194,245,137,
138,217,239,151,138,
139,206,244, 66,139,
140,171,181, 83,140,
141,188,174,134,141,
142,133,131,228,142,
143,146,152, 49,143,
144, 34,172, 23,144,
145, 53,183,194,145,
146, 12,154,160,146,
147, 27,129,117,147,
148,126,192,100,148,
149,105,219,177,149,
150, 80,246,211,150,
151, 71,237,  6,151,
152,154,116,241,152,
153,141,111, 36,153,
154,180, 66, 70,154,
155,163, 89,147,155,
156,198, 24,130,156,
157,209,  3, 87,157,
158,232, 46, 53,158,
159,255, 53,224,159,
160,149, 70,121,160,
161,130, 93,172,161,
162,187,112,206,162,
163,172,107, 27,163,
164,201, 42, 10,164,
165,222, 49,223,165,
166,231, 28,189,166,
167,240,  7,104,167,
168, 45,158,159,168,
169, 58,133, 74,169,
170,  3,168, 40,170,
171, 20,179,253,171,
172,113,242,236,172,
173,102,233, 57,173,
174, 95,196, 91,174,
175, 72,223,142,175,
176,248,235,168,176,
177,239,240,125,177,
178,214,221, 31,178,
179,193,198,202,179,
180,164,135,219,180,
181,179,156, 14,181,
182,138,177,108,182,
183,157,170,185,183,
184, 64, 51, 78,184,
185, 87, 40,155,185,
186,110,  5,249,186,
187,121, 30, 44,187,
188, 28, 95, 61,188,
189, 11, 68,232,189,
190, 50,105,138,190,
191, 37,114, 95,191,
192,230,143,165,192,
193,241,148,112,193,
194,200,185, 18,194,
195,223,162,199,195,
196,186,227,214,196,
197,173,248,  3,197,
198,148,213, 97,198,
199,131,206,180,199,
200, 94, 87, 67,200,
201, 73, 76,150,201,
202,112, 97,244,202,
203,103,122, 33,203,
204,  2, 59, 48,204,
205, 21, 32,229,205,
206, 44, 13,135,206,
207, 59, 22, 82,207,
208,139, 34,116,208,
209,156, 57,161,209,
210,165, 20,195,210,
211,178, 15, 22,211,
212,215, 78,  7,212,
213,192, 85,210,213,
214,249,120,176,214,
215,238, 99,101,215,
216, 51,250,146,216,
217, 36,225, 71,217,
218, 29,204, 37,218,
219, 10,215,240,219,
220,111,150,225,220,
221,120,141, 52,221,
222, 65,160, 86,222,
223, 86,187,131,223,
224, 60,200, 26,224,
225, 43,211,207,225,
226, 18,254,173,226,
227,  5,229,120,227,
228, 96,164,105,228,
229,119,191,188,229,
230, 78,146,222,230,
231, 89,137, 11,231,
232,132, 16,252,232,
233,147, 11, 41,233,
234,170, 38, 75,234,
235,189, 61,158,235,
236,216,124,143,236,
237,207,103, 90,237,
238,246, 74, 56,238,
239,225, 81,237,239,
240, 81,101,203,240,
241, 70,126, 30,241,
242,127, 83,124,242,
243,104, 72,169,243,
244, 13,  9,184,244,
245, 26, 18,109,245,
246, 35, 63, 15,246,
247, 52, 36,218,247,
248,233,189, 45,248,
249,254,166,248,249,
250,199,139,154,250,
251,208,144, 79,251,
252,181,209, 94,252,
253,162,202,139,253,
254,155,231,233,254,
255,140,252, 60,255,
};

void crc_object::divide_bravo(
		const unsigned char *in771, unsigned char *out4)
{
	unsigned char R[771];
	int i, ii, jj;
	int x;
	for (i = 0; i < 771; i++) {
		R[i] = in771[i];
	}

	for (i = 771 - 1; i >= 4; i--) {
		x = R[i];
		if (x == 0) {
			continue;
		}
		x--;
		for (ii = i, jj = 4; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_bravo[x * 5 + jj];
		}
	}

	for (i = 3; i >= 0; i--) {
		out4[i] = R[i];
	}
}




// charlie:


// crc code parameters: q256_n771_r12
// the size of the array crc_poly_table_charlie is  255 x 13
const unsigned char crc_poly_table_charlie[] = {
  1,126, 25,  1,196,209,244,  3,121,126, 35, 65,  1,
  2,252, 50,  2,149,191,245,  6,242,252, 70,130,  2,
  3,130, 43,  3, 81,110,  1,  5,139,130,101,195,  3,
  4,229,100,  4, 55, 99,247, 12,249,229,140, 25,  4,
  5,155,125,  5,243,178,  3, 15,128,155,175, 88,  5,
  6, 25, 86,  6,162,220,  2, 10, 11, 25,202,155,  6,
  7,103, 79,  7,102, 13,246,  9,114,103,233,218,  7,
  8,215,200,  8,110,198,243, 24,239,215,  5, 50,  8,
  9,169,209,  9,170, 23,  7, 27,150,169, 38,115,  9,
 10, 43,250, 10,251,121,  6, 30, 29, 43, 67,176, 10,
 11, 85,227, 11, 63,168,242, 29,100, 85, 96,241, 11,
 12, 50,172, 12, 89,165,  4, 20, 22, 50,137, 43, 12,
 13, 76,181, 13,157,116,240, 23,111, 76,170,106, 13,
 14,206,158, 14,204, 26,241, 18,228,206,207,169, 14,
 15,176,135, 15,  8,203,  5, 17,157,176,236,232, 15,
 16,179,141, 16,220,145,251, 48,195,179, 10,100, 16,
 17,205,148, 17, 24, 64, 15, 51,186,205, 41, 37, 17,
 18, 79,191, 18, 73, 46, 14, 54, 49, 79, 76,230, 18,
 19, 49,166, 19,141,255,250, 53, 72, 49,111,167, 19,
 20, 86,233, 20,235,242, 12, 60, 58, 86,134,125, 20,
 21, 40,240, 21, 47, 35,248, 63, 67, 40,165, 60, 21,
 22,170,219, 22,126, 77,249, 58,200,170,192,255, 22,
 23,212,194, 23,186,156, 13, 57,177,212,227,190, 23,
 24,100, 69, 24,178, 87,  8, 40, 44,100, 15, 86, 24,
 25, 26, 92, 25,118,134,252, 43, 85, 26, 44, 23, 25,
 26,152,119, 26, 39,232,253, 46,222,152, 73,212, 26,
 27,230,110, 27,227, 57,  9, 45,167,230,106,149, 27,
 28,129, 33, 28,133, 52,255, 36,213,129,131, 79, 28,
 29,255, 56, 29, 65,229, 11, 39,172,255,160, 14, 29,
 30,125, 19, 30, 16,139, 10, 34, 39,125,197,205, 30,
 31,  3, 10, 31,212, 90,254, 33, 94,  3,230,140, 31,
 32,123,  7, 32,165, 63,235, 96,155,123, 20,200, 32,
 33,  5, 30, 33, 97,238, 31, 99,226,  5, 55,137, 33,
 34,135, 53, 34, 48,128, 30,102,105,135, 82, 74, 34,
 35,249, 44, 35,244, 81,234,101, 16,249,113, 11, 35,
 36,158, 99, 36,146, 92, 28,108, 98,158,152,209, 36,
 37,224,122, 37, 86,141,232,111, 27,224,187,144, 37,
 38, 98, 81, 38,  7,227,233,106,144, 98,222, 83, 38,
 39, 28, 72, 39,195, 50, 29,105,233, 28,253, 18, 39,
 40,172,207, 40,203,249, 24,120,116,172, 17,250, 40,
 41,210,214, 41, 15, 40,236,123, 13,210, 50,187, 41,
 42, 80,253, 42, 94, 70,237,126,134, 80, 87,120, 42,
 43, 46,228, 43,154,151, 25,125,255, 46,116, 57, 43,
 44, 73,171, 44,252,154,239,116,141, 73,157,227, 44,
 45, 55,178, 45, 56, 75, 27,119,244, 55,190,162, 45,
 46,181,153, 46,105, 37, 26,114,127,181,219, 97, 46,
 47,203,128, 47,173,244,238,113,  6,203,248, 32, 47,
 48,200,138, 48,121,174, 16, 80, 88,200, 30,172, 48,
 49,182,147, 49,189,127,228, 83, 33,182, 61,237, 49,
 50, 52,184, 50,236, 17,229, 86,170, 52, 88, 46, 50,
 51, 74,161, 51, 40,192, 17, 85,211, 74,123,111, 51,
 52, 45,238, 52, 78,205,231, 92,161, 45,146,181, 52,
 53, 83,247, 53,138, 28, 19, 95,216, 83,177,244, 53,
 54,209,220, 54,219,114, 18, 90, 83,209,212, 55, 54,
 55,175,197, 55, 31,163,230, 89, 42,175,247,118, 55,
 56, 31, 66, 56, 23,104,227, 72,183, 31, 27,158, 56,
 57, 97, 91, 57,211,185, 23, 75,206, 97, 56,223, 57,
 58,227,112, 58,130,215, 22, 78, 69,227, 93, 28, 58,
 59,157,105, 59, 70,  6,226, 77, 60,157,126, 93, 59,
 60,250, 38, 60, 32, 11, 20, 68, 78,250,151,135, 60,
 61,132, 63, 61,228,218,224, 71, 55,132,180,198, 61,
 62,  6, 20, 62,181,180,225, 66,188,  6,209,  5, 62,
 63,120, 13, 63,113,101, 21, 65,197,120,242, 68, 63,
 64,246, 14, 64, 87,126,203,192, 43,246, 40,141, 64,
 65,136, 23, 65,147,175, 63,195, 82,136, 11,204, 65,
 66, 10, 60, 66,194,193, 62,198,217, 10,110, 15, 66,
 67,116, 37, 67,  6, 16,202,197,160,116, 77, 78, 67,
 68, 19,106, 68, 96, 29, 60,204,210, 19,164,148, 68,
 69,109,115, 69,164,204,200,207,171,109,135,213, 69,
 70,239, 88, 70,245,162,201,202, 32,239,226, 22, 70,
 71,145, 65, 71, 49,115, 61,201, 89,145,193, 87, 71,
 72, 33,198, 72, 57,184, 56,216,196, 33, 45,191, 72,
 73, 95,223, 73,253,105,204,219,189, 95, 14,254, 73,
 74,221,244, 74,172,  7,205,222, 54,221,107, 61, 74,
 75,163,237, 75,104,214, 57,221, 79,163, 72,124, 75,
 76,196,162, 76, 14,219,207,212, 61,196,161,166, 76,
 77,186,187, 77,202, 10, 59,215, 68,186,130,231, 77,
 78, 56,144, 78,155,100, 58,210,207, 56,231, 36, 78,
 79, 70,137, 79, 95,181,206,209,182, 70,196,101, 79,
 80, 69,131, 80,139,239, 48,240,232, 69, 34,233, 80,
 81, 59,154, 81, 79, 62,196,243,145, 59,  1,168, 81,
 82,185,177, 82, 30, 80,197,246, 26,185,100,107, 82,
 83,199,168, 83,218,129, 49,245, 99,199, 71, 42, 83,
 84,160,231, 84,188,140,199,252, 17,160,174,240, 84,
 85,222,254, 85,120, 93, 51,255,104,222,141,177, 85,
 86, 92,213, 86, 41, 51, 50,250,227, 92,232,114, 86,
 87, 34,204, 87,237,226,198,249,154, 34,203, 51, 87,
 88,146, 75, 88,229, 41,195,232,  7,146, 39,219, 88,
 89,236, 82, 89, 33,248, 55,235,126,236,  4,154, 89,
 90,110,121, 90,112,150, 54,238,245,110, 97, 89, 90,
 91, 16, 96, 91,180, 71,194,237,140, 16, 66, 24, 91,
 92,119, 47, 92,210, 74, 52,228,254,119,171,194, 92,
 93,  9, 54, 93, 22,155,192,231,135,  9,136,131, 93,
 94,139, 29, 94, 71,245,193,226, 12,139,237, 64, 94,
 95,245,  4, 95,131, 36, 53,225,117,245,206,  1, 95,
 96,141,  9, 96,242, 65, 32,160,176,141, 60, 69, 96,
 97,243, 16, 97, 54,144,212,163,201,243, 31,  4, 97,
 98,113, 59, 98,103,254,213,166, 66,113,122,199, 98,
 99, 15, 34, 99,163, 47, 33,165, 59, 15, 89,134, 99,
100,104,109,100,197, 34,215,172, 73,104,176, 92,100,
101, 22,116,101,  1,243, 35,175, 48, 22,147, 29,101,
102,148, 95,102, 80,157, 34,170,187,148,246,222,102,
103,234, 70,103,148, 76,214,169,194,234,213,159,103,
104, 90,193,104,156,135,211,184, 95, 90, 57,119,104,
105, 36,216,105, 88, 86, 39,187, 38, 36, 26, 54,105,
106,166,243,106,  9, 56, 38,190,173,166,127,245,106,
107,216,234,107,205,233,210,189,212,216, 92,180,107,
108,191,165,108,171,228, 36,180,166,191,181,110,108,
109,193,188,109,111, 53,208,183,223,193,150, 47,109,
110, 67,151,110, 62, 91,209,178, 84, 67,243,236,110,
111, 61,142,111,250,138, 37,177, 45, 61,208,173,111,
112, 62,132,112, 46,208,219,144,115, 62, 54, 33,112,
113, 64,157,113,234,  1, 47,147, 10, 64, 21, 96,113,
114,194,182,114,187,111, 46,150,129,194,112,163,114,
115,188,175,115,127,190,218,149,248,188, 83,226,115,
116,219,224,116, 25,179, 44,156,138,219,186, 56,116,
117,165,249,117,221, 98,216,159,243,165,153,121,117,
118, 39,210,118,140, 12,217,154,120, 39,252,186,118,
119, 89,203,119, 72,221, 45,153,  1, 89,223,251,119,
120,233, 76,120, 64, 22, 40,136,156,233, 51, 19,120,
121,151, 85,121,132,199,220,139,229,151, 16, 82,121,
122, 21,126,122,213,169,221,142,110, 21,117,145,122,
123,107,103,123, 17,120, 41,141, 23,107, 86,208,123,
124, 12, 40,124,119,117,223,132,101, 12,191, 10,124,
125,114, 49,125,179,164, 43,135, 28,114,156, 75,125,
126,240, 26,126,226,202, 42,130,151,240,249,136,126,
127,142,  3,127, 38, 27,222,129,238,142,218,201,127,
128,241, 28,128,174,252,139,157, 86,241, 80,  7,128,
129,143,  5,129,106, 45,127,158, 47,143,115, 70,129,
130, 13, 46,130, 59, 67,126,155,164, 13, 22,133,130,
131,115, 55,131,255,146,138,152,221,115, 53,196,131,
132, 20,120,132,153,159,124,145,175, 20,220, 30,132,
133,106, 97,133, 93, 78,136,146,214,106,255, 95,133,
134,232, 74,134, 12, 32,137,151, 93,232,154,156,134,
135,150, 83,135,200,241,125,148, 36,150,185,221,135,
136, 38,212,136,192, 58,120,133,185, 38, 85, 53,136,
137, 88,205,137,  4,235,140,134,192, 88,118,116,137,
138,218,230,138, 85,133,141,131, 75,218, 19,183,138,
139,164,255,139,145, 84,121,128, 50,164, 48,246,139,
140,195,176,140,247, 89,143,137, 64,195,217, 44,140,
141,189,169,141, 51,136,123,138, 57,189,250,109,141,
142, 63,130,142, 98,230,122,143,178, 63,159,174,142,
143, 65,155,143,166, 55,142,140,203, 65,188,239,143,
144, 66,145,144,114,109,112,173,149, 66, 90, 99,144,
145, 60,136,145,182,188,132,174,236, 60,121, 34,145,
146,190,163,146,231,210,133,171,103,190, 28,225,146,
147,192,186,147, 35,  3,113,168, 30,192, 63,160,147,
148,167,245,148, 69, 14,135,161,108,167,214,122,148,
149,217,236,149,129,223,115,162, 21,217,245, 59,149,
150, 91,199,150,208,177,114,167,158, 91,144,248,150,
151, 37,222,151, 20, 96,134,164,231, 37,179,185,151,
152,149, 89,152, 28,171,131,181,122,149, 95, 81,152,
153,235, 64,153,216,122,119,182,  3,235,124, 16,153,
154,105,107,154,137, 20,118,179,136,105, 25,211,154,
155, 23,114,155, 77,197,130,176,241, 23, 58,146,155,
156,112, 61,156, 43,200,116,185,131,112,211, 72,156,
157, 14, 36,157,239, 25,128,186,250, 14,240,  9,157,
158,140, 15,158,190,119,129,191,113,140,149,202,158,
159,242, 22,159,122,166,117,188,  8,242,182,139,159,
160,138, 27,160, 11,195, 96,253,205,138, 68,207,160,
161,244,  2,161,207, 18,148,254,180,244,103,142,161,
162,118, 41,162,158,124,149,251, 63,118,  2, 77,162,
163,  8, 48,163, 90,173, 97,248, 70,  8, 33, 12,163,
164,111,127,164, 60,160,151,241, 52,111,200,214,164,
165, 17,102,165,248,113, 99,242, 77, 17,235,151,165,
166,147, 77,166,169, 31, 98,247,198,147,142, 84,166,
167,237, 84,167,109,206,150,244,191,237,173, 21,167,
168, 93,211,168,101,  5,147,229, 34, 93, 65,253,168,
169, 35,202,169,161,212,103,230, 91, 35, 98,188,169,
170,161,225,170,240,186,102,227,208,161,  7,127,170,
171,223,248,171, 52,107,146,224,169,223, 36, 62,171,
172,184,183,172, 82,102,100,233,219,184,205,228,172,
173,198,174,173,150,183,144,234,162,198,238,165,173,
174, 68,133,174,199,217,145,239, 41, 68,139,102,174,
175, 58,156,175,  3,  8,101,236, 80, 58,168, 39,175,
176, 57,150,176,215, 82,155,205, 14, 57, 78,171,176,
177, 71,143,177, 19,131,111,206,119, 71,109,234,177,
178,197,164,178, 66,237,110,203,252,197,  8, 41,178,
179,187,189,179,134, 60,154,200,133,187, 43,104,179,
180,220,242,180,224, 49,108,193,247,220,194,178,180,
181,162,235,181, 36,224,152,194,142,162,225,243,181,
182, 32,192,182,117,142,153,199,  5, 32,132, 48,182,
183, 94,217,183,177, 95,109,196,124, 94,167,113,183,
184,238, 94,184,185,148,104,213,225,238, 75,153,184,
185,144, 71,185,125, 69,156,214,152,144,104,216,185,
186, 18,108,186, 44, 43,157,211, 19, 18, 13, 27,186,
187,108,117,187,232,250,105,208,106,108, 46, 90,187,
188, 11, 58,188,142,247,159,217, 24, 11,199,128,188,
189,117, 35,189, 74, 38,107,218, 97,117,228,193,189,
190,247,  8,190, 27, 72,106,223,234,247,129,  2,190,
191,137, 17,191,223,153,158,220,147,137,162, 67,191,
192,  7, 18,192,249,130, 64, 93,125,  7,120,138,192,
193,121, 11,193, 61, 83,180, 94,  4,121, 91,203,193,
194,251, 32,194,108, 61,181, 91,143,251, 62,  8,194,
195,133, 57,195,168,236, 65, 88,246,133, 29, 73,195,
196,226,118,196,206,225,183, 81,132,226,244,147,196,
197,156,111,197, 10, 48, 67, 82,253,156,215,210,197,
198, 30, 68,198, 91, 94, 66, 87,118, 30,178, 17,198,
199, 96, 93,199,159,143,182, 84, 15, 96,145, 80,199,
200,208,218,200,151, 68,179, 69,146,208,125,184,200,
201,174,195,201, 83,149, 71, 70,235,174, 94,249,201,
202, 44,232,202,  2,251, 70, 67, 96, 44, 59, 58,202,
203, 82,241,203,198, 42,178, 64, 25, 82, 24,123,203,
204, 53,190,204,160, 39, 68, 73,107, 53,241,161,204,
205, 75,167,205,100,246,176, 74, 18, 75,210,224,205,
206,201,140,206, 53,152,177, 79,153,201,183, 35,206,
207,183,149,207,241, 73, 69, 76,224,183,148, 98,207,
208,180,159,208, 37, 19,187,109,190,180,114,238,208,
209,202,134,209,225,194, 79,110,199,202, 81,175,209,
210, 72,173,210,176,172, 78,107, 76, 72, 52,108,210,
211, 54,180,211,116,125,186,104, 53, 54, 23, 45,211,
212, 81,251,212, 18,112, 76, 97, 71, 81,254,247,212,
213, 47,226,213,214,161,184, 98, 62, 47,221,182,213,
214,173,201,214,135,207,185,103,181,173,184,117,214,
215,211,208,215, 67, 30, 77,100,204,211,155, 52,215,
216, 99, 87,216, 75,213, 72,117, 81, 99,119,220,216,
217, 29, 78,217,143,  4,188,118, 40, 29, 84,157,217,
218,159,101,218,222,106,189,115,163,159, 49, 94,218,
219,225,124,219, 26,187, 73,112,218,225, 18, 31,219,
220,134, 51,220,124,182,191,121,168,134,251,197,220,
221,248, 42,221,184,103, 75,122,209,248,216,132,221,
222,122,  1,222,233,  9, 74,127, 90,122,189, 71,222,
223,  4, 24,223, 45,216,190,124, 35,  4,158,  6,223,
224,124, 21,224, 92,189,171, 61,230,124,108, 66,224,
225,  2, 12,225,152,108, 95, 62,159,  2, 79,  3,225,
226,128, 39,226,201,  2, 94, 59, 20,128, 42,192,226,
227,254, 62,227, 13,211,170, 56,109,254,  9,129,227,
228,153,113,228,107,222, 92, 49, 31,153,224, 91,228,
229,231,104,229,175, 15,168, 50,102,231,195, 26,229,
230,101, 67,230,254, 97,169, 55,237,101,166,217,230,
231, 27, 90,231, 58,176, 93, 52,148, 27,133,152,231,
232,171,221,232, 50,123, 88, 37,  9,171,105,112,232,
233,213,196,233,246,170,172, 38,112,213, 74, 49,233,
234, 87,239,234,167,196,173, 35,251, 87, 47,242,234,
235, 41,246,235, 99, 21, 89, 32,130, 41, 12,179,235,
236, 78,185,236,  5, 24,175, 41,240, 78,229,105,236,
237, 48,160,237,193,201, 91, 42,137, 48,198, 40,237,
238,178,139,238,144,167, 90, 47,  2,178,163,235,238,
239,204,146,239, 84,118,174, 44,123,204,128,170,239,
240,207,152,240,128, 44, 80, 13, 37,207,102, 38,240,
241,177,129,241, 68,253,164, 14, 92,177, 69,103,241,
242, 51,170,242, 21,147,165, 11,215, 51, 32,164,242,
243, 77,179,243,209, 66, 81,  8,174, 77,  3,229,243,
244, 42,252,244,183, 79,167,  1,220, 42,234, 63,244,
245, 84,229,245,115,158, 83,  2,165, 84,201,126,245,
246,214,206,246, 34,240, 82,  7, 46,214,172,189,246,
247,168,215,247,230, 33,166,  4, 87,168,143,252,247,
248, 24, 80,248,238,234,163, 21,202, 24, 99, 20,248,
249,102, 73,249, 42, 59, 87, 22,179,102, 64, 85,249,
250,228, 98,250,123, 85, 86, 19, 56,228, 37,150,250,
251,154,123,251,191,132,162, 16, 65,154,  6,215,251,
252,253, 52,252,217,137, 84, 25, 51,253,239, 13,252,
253,131, 45,253, 29, 88,160, 26, 74,131,204, 76,253,
254,  1,  6,254, 76, 54,161, 31,193,  1,169,143,254,
255,127, 31,255,136,231, 85, 28,184,127,138,206,255,
};

void crc_object::divide_charlie(
		const unsigned char *in771, unsigned char *out12)
{
	unsigned char R[771];
	int i, ii, jj;
	int x;
	for (i = 0; i < 771; i++) {
		R[i] = in771[i];
	}

	for (i = 770; i >= 12; i--) {
		x = R[i];
		if (x == 0) {
			continue;
		}
		//cout << "i=" << i << " x=" << x << endl;
		x--;
		for (ii = i, jj = 12; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_charlie[x * 13 + jj];
		}
	}

	for (i = 11; i >= 0; i--) {
		out12[i] = R[i];
	}
}



// crc code parameters: q16_n51_r4
// the size of the array crc_poly_table_delta is  15 x 5
const unsigned char crc_poly_table_Delta[] = {
 1, 2,13, 5, 1,
 2, 4, 9,10, 2,
 3, 6, 4,15, 3,
 4, 8, 1, 7, 4,
 5,10,12, 2, 5,
 6,12, 8,13, 6,
 7,14, 5, 8, 7,
 8, 3, 2,14, 8,
 9, 1,15,11, 9,
10, 7,11, 4,10,
11, 5, 6, 1,11,
12,11, 3, 9,12,
13, 9,14,12,13,
14,15,10, 3,14,
15,13, 7, 6,15,
};

void crc_object::divide_Delta(
		const unsigned char *in51, unsigned char *out4)
{
	unsigned char R[51];
	int i, j, ii, jj;
	int x;
	for (i = 0; i < 51; i++) {
		R[i] = in51[i];
	}
	data_structures::algorithms Algo;

	for (i = 50, j = 47; i >= 4; i--, j--) {
		x = R[i];


		if (false) {
			int u;
			for (u = i; u >= 0; u--) {
				cout << Algo.make_single_hex_digit(R[u]);
			}
			cout << endl;
		}

		if (x == 0) {
			continue;
		}
		x--;
		for (ii = i, jj = 4; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_Delta[x * 5 + jj];
		}
	}

	if (false) {
		cout << "remainder:" << endl;
		int u;
		for (u = 3; u >= 0; u--) {
			cout << Algo.make_single_hex_digit(R[u]);
		}
		cout << endl;
	}

	for (i = 3; i >= 0; i--) {
		out4[i] = R[i];
	}
}




// crc code parameters: q16_n51_r8
// the size of the array crc_poly_table_Echo is  15 x 9
const unsigned char crc_poly_table_Echo[] = {
 6, 1,10, 6,13,14, 6, 5, 1,
12, 2, 7,12, 9,15,12,10, 2,
10, 3,13,10, 4, 1,10,15, 3,
11, 4,14,11, 1,13,11, 7, 4,
13, 5, 4,13,12, 3,13, 2, 5,
 7, 6, 9, 7, 8, 2, 7,13, 6,
 1, 7, 3, 1, 5,12, 1, 8, 7,
 5, 8,15, 5, 2, 9, 5,14, 8,
 3, 9, 5, 3,15, 7, 3,11, 9,
 9,10, 8, 9,11, 6, 9, 4,10,
15,11, 2,15, 6, 8,15, 1,11,
14,12, 1,14, 3, 4,14, 9,12,
 8,13,11, 8,14,10, 8,12,13,
 2,14, 6, 2,10,11, 2, 3,14,
 4,15,12, 4, 7, 5, 4, 6,15,
};

void crc_object::divide_Echo(
		const unsigned char *in51, unsigned char *out8)
{
	unsigned char R[51];
	int i, j, ii, jj;
	int x;
	for (i = 0; i < 51; i++) {
		R[i] = in51[i];
	}

	for (i = 50, j = 43; i >= 8; i--, j--) {
		x = R[i];
		if (x >= 16) {
			cout << "crc_object::divide_Echo x >= 16" << endl;
			exit(1);
		}
		if (x == 0) {
			continue;
		}
		//cout << "i=" << i << " x=" << x << endl;
		x--;
		for (ii = i, jj = 8; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_Echo[x * 9 + jj];
		}
	}

	for (i = 7; i >= 0; i--) {
		out8[i] = R[i];
	}
}



// crc code parameters: q16_n15_r4
// the size of the array crc_poly_table_foxtrot is  15 x 5
const unsigned char crc_poly_table_foxtrot[] = {
 7, 8,12,13, 1,
14, 3,11, 9, 2,
 9,11, 7, 4, 3,
15, 6, 5, 1, 4,
 8,14, 9,12, 5,
 1, 5,14, 8, 6,
 6,13, 2, 5, 7,
13,12,10, 2, 8,
10, 4, 6,15, 9,
 3,15, 1,11,10,
 4, 7,13, 6,11,
 2,10,15, 3,12,
 5, 2, 3,14,13,
12, 9, 4,10,14,
11, 1, 8, 7,15,
};

void crc_object::divide_Foxtrot(
		const unsigned char *in15, unsigned char *out4)
{
	unsigned char R[15];
	int i, j, ii, jj;
	int x;
	for (i = 0; i < 15; i++) {
		R[i] = in15[i];
	}

	for (i = 14, j = 11; i >= 4; i--, j--) {
		x = R[i];
		if (x == 0) {
			continue;
		}
		//cout << "i=" << i << " x=" << x << endl;
		x--;
		for (ii = i, jj = 4; jj >= 0; ii--, jj--) {
			R[ii] ^= crc_poly_table_foxtrot[x * 5 + jj];
		}
	}

	for (i = 3; i >= 0; i--) {
		out4[i] = R[i];
	}
}



void crc_object::divide_crc32(
		const uint8_t *s, size_t n, unsigned char *out4)
// polynomial x^32 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11
// + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
{
	uint32_t crc = 0xFFFFFFFF;

	for (size_t i = 0; i < n; i++) {
		char ch = s[i];
		for (size_t j = 0; j < 8; j++) {
			uint32_t b = (ch^crc) & 1;
			crc >>= 1;
			if (b) {
				crc = crc^0xEDB88320; // reversed polynomial
			}
			ch >>= 1;
		}
	}
	crc = ~crc;
	unsigned char *p = (unsigned char *) &crc;
	out4[0] = p[0];
	out4[1] = p[1];
	out4[2] = p[2];
	out4[3] = p[3];
}

void crc_object::SuperFastHash32(
		const unsigned char * data, int len, unsigned char *out4)
{

	data_structures::algorithms Algo;
	uint32_t h;


	h = Algo.SuperFastHash((const char *) data, len);
	unsigned char *p_crc = (unsigned char *) &h;
	out4[0] = p_crc[0];
	out4[1] = p_crc[1];
	out4[2] = p_crc[2];
	out4[3] = p_crc[3];
}

#define CRC16 0x8005

void crc_object::divide_crc16(
		const uint8_t *data, size_t size, unsigned char *out2)
{
    uint16_t out = 0;
    int bits_read = 0, bit_flag;

    while (size > 0)
    {
        bit_flag = out >> 15;

        /* Get next bit: */
        out <<= 1;
        out |= (*data >> bits_read) & 1; // item a) work from the least significant bits

        /* Increment bit counter: */
        bits_read++;
        if (bits_read > 7)
        {
            bits_read = 0;
            data++;
            size--;
        }

        /* Cycle check: */
        if (bit_flag)
            out ^= CRC16;

    }

    // item b) "push out" the last 16 bits
    int i;
    for (i = 0; i < 16; ++i) {
        bit_flag = out >> 15;
        out <<= 1;
        if (bit_flag)
            out ^= CRC16;
    }

    // item c) reverse the bits
    uint16_t crc = 0;
    i = 0x8000;
    int j = 0x0001;
    for (; i != 0; i >>=1, j <<= 1) {
        if (i & out) crc |= j;
    }

	unsigned char *p_crc = (unsigned char *) &crc;
	out2[0] = p_crc[0];
	out2[1] = p_crc[1];

    //return crc;
}



}}}




